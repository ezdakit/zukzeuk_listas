name: Run ZeroNet on Ubuntu

on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/running_zeronet.yml

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - run: echo "Checked out code"

      - name: Install dependencies
        run: |
          echo "Installing dependencies"
          sudo apt-get update
          sudo apt-get install -y wget tar curl
          echo "Dependencies installed"

      - name: Download and extract ZeroNet
        run: |
          echo "Downloading ZeroNet"
          wget https://github.com/HelloZeroNet/ZeroNet-linux/archive/dist-linux64/ZeroNet-py3-linux64.tar.gz
          tar xvpfz ZeroNet-py3-linux64.tar.gz
          cd ZeroNet-linux-dist-linux64/
          echo "ZeroNet downloaded and extracted"

      - name: Start ZeroNet
        run: |
          echo "Starting ZeroNet"
          cd ZeroNet-linux-dist-linux64/
          ./ZeroNet.sh &
          echo "ZeroNet started"

      - name: Verify ZeroNet is running
        run: |
          echo "Verifying ZeroNet is running"
          sleep 5  # Espera 5 segundos para asegurar que ZeroNet esté listo
          curl -I http://127.0.0.1:43110
          echo "ZeroNet verification complete"

      - name: Download and analyze page content (18cZ4ehTarf34TCxntYDx9T2NHXiBvsVie)
        run: |
          echo "Downloading http://127.0.0.1:43110/18cZ4ehTarf34TCxntYDx9T2NHXiBvsVie/"
          curl -H "Accept: text/html" -o page.html http://127.0.0.1:43110/18cZ4ehTarf34TCxntYDx9T2NHXiBvsVie/
          
          echo "Printing full HTML content:"
          cat page.html
          
          echo "Extracting JavaScript configuration:"
          # Extraemos el contenido completo del script que contiene la configuración
          CONFIG_SCRIPT=$(grep -oPz '(?s)<script id="script_init"[^>]*>.*?</script>' page.html)
          if [ -z "$CONFIG_SCRIPT" ]; then
            echo "JavaScript configuration not found."
            exit 1
          fi
          
          echo "JavaScript configuration found:"
          echo "$CONFIG_SCRIPT"
          
          # Extraemos las variables de configuración
          ADDRESS=$(echo "$CONFIG_SCRIPT" | grep -oP 'address\s*=\s*"[^"]+"' | cut -d'"' -f2)
          WRAPPER_NONCE=$(echo "$CONFIG_SCRIPT" | grep -oP 'wrapper_nonce\s*=\s*"[^"]+"' | cut -d'"' -f2)
          WRAPPER_KEY=$(echo "$CONFIG_SCRIPT" | grep -oP 'wrapper_key\s*=\s*"[^"]+"' | cut -d'"' -f2)
          AJAX_KEY=$(echo "$CONFIG_SCRIPT" | grep -oP 'ajax_key\s*=\s*"[^"]+"' | cut -d'"' -f2)
          FILE_INNER_PATH=$(echo "$CONFIG_SCRIPT" | grep -oP 'file_inner_path\s*=\s*"[^"]+"' | cut -d'"' -f2)
          SCRIPT_NONCE=$(echo "$CONFIG_SCRIPT" | grep -oP 'script_nonce\s*=\s*"[^"]+"' | cut -d'"' -f2)
          
          echo "Extracted configuration:"
          echo "Address: $ADDRESS"
          echo "Wrapper Nonce: $WRAPPER_NONCE"
          echo "Wrapper Key: $WRAPPER_KEY"
          echo "Ajax Key: $AJAX_KEY"
          echo "File Inner Path: $FILE_INNER_PATH"
          echo "Script Nonce: $SCRIPT_NONCE"
          
          # Descargamos el contenido del inner-iframe
          echo "Downloading inner-iframe content:"
          INNER_IFRAME_URL="http://127.0.0.1:43110/$ADDRESS/$FILE_INNER_PATH?wrapper_nonce=$WRAPPER_NONCE"
          curl -H "Accept: text/html" -o inner-iframe.html "$INNER_IFRAME_URL"
          
          echo "Inner-iframe content downloaded:"
          cat inner-iframe.html
          echo "Inner-iframe content printed above"
